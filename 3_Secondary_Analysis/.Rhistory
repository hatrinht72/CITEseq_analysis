install.packages('hdf5r')
install.packages("Signac")
install.package("Seurat")
install.packages("Seurat")
library(Signac)
library(Signac)
install.packages("BiocManager")
install.packages("/Download/BiocManager_1.30.25.tar.gz", repos = NULL, type = "source")
install.packages("Home/Download/BiocManager_1.30.25.tar.gz", repos = NULL, type = "source")
ls
ls
install.packages("/Download/BiocManager_1.30.25.tar.gz", repos = NULL, type = "source")
install.packages("/Downloads/BiocManager_1.30.25.tar.gz", repos = NULL, type = "source")
install.packages("home/Downloads/BiocManager_1.30.25.tar.gz", repos = NULL, type = "source")
BiocManager::install("Seurat")
#install : hdf5r, Signac, Seurat
install.packages('hdf5r')
library(Signac)
install.packages('Signac')
install.packages('Seurat')
library(Seurat)
library(Signac)
load("~/y1/tutorial/bysambomics/bysanbomics.Rdata")
View(counts)
library(Seurat)
library(Signac)
library(SeuratObject)
load("~/y1/tutorial/bysambomics/bysanbomics.Rdata")
View(chrom_assay)
View(data)
View(counts)
View(counts)
View(meta)
View(counts)
View(chrom_assay)
View(data)
matrix <- read.csv("~/set_ppp2ca.csv")
library(ggplot2)
library(tidyr)
library(dplyr)
# Vos données initiales
data <- matrix
# Séparer les données par condition
data_Tom <- subset(data, condition == "Tom_BA + Tom_Cre")
data_GFP <- subset(data, condition == "GFP_BA")
# Calculer les moyennes par gène pour chaque condition
mean_Tom <- data_Tom %>%
group_by(gene) %>%
summarise(across(starts_with("Set"), mean, na.rm = TRUE))
# Calculer les moyennes par gène pour chaque condition
mean_Tom <- data_Tom %>%
summarise(mean_Set = mean(Set, na.rm = TRUE),
mean_Ppp2ca = mean(Ppp2ca, na.rm = TRUE))
mean_GFP <- data_GFP %>%
summarise(mean_Set = mean(Set, na.rm = TRUE),
mean_Ppp2ca = mean(Ppp2ca, na.rm = TRUE))
# Calculer les log-fold changes
logFC_Set <- log2(mean_Tom$mean_Set / mean_GFP$mean_Set)
logFC_Ppp2ca <- log2(mean_Tom$mean_Ppp2ca / mean_GFP$mean_Ppp2ca)
# Calculer les p-values pour chaque gène
p_value_Set <- t.test(data_Tom$Set, data_GFP$Set)$p.value
p_value_Ppp2ca <- t.test(data_Tom$Ppp2ca, data_GFP$Ppp2ca)$p.value
# Créer un data frame pour le volcano plot
volcano_data <- data.frame(
gene = c("Set", "Ppp2ca"),
logFC = c(logFC_Set, logFC_Ppp2ca),
p_value = c(p_value_Set, p_value_Ppp2ca)
)
# Ajouter une colonne pour -log10(p-value)
volcano_data <- volcano_data %>%
mutate(minus_log10_p_value = -log10(p_value))
# Afficher les données pour le volcano plot
print(volcano_data)
# Créer le volcano plot
ggplot(volcano_data, aes(x = logFC, y = minus_log10_p_value, label = gene)) +
geom_point() +
geom_text(vjust = 1.5, hjust = 1.5) +
xlab("Log2 Fold Change") +
ylab("-Log10(p-value)") +
ggtitle("Volcano Plot for Set and Ppp2ca") +
theme_minimal()
data_Tom <- data_Tom %>%
mutate(logFC_Set = log2(Set + 1), logFC_Ppp2ca = log2(Ppp2ca + 1))
data_GFP <- data_GFP %>%
mutate(logFC_Set = log2(Set + 1), logFC_Ppp2ca = log2(Ppp2ca + 1))
# Combiner les deux ensembles de données
data_combined <- bind_rows(data_Tom, data_GFP)
# Calculer les p-values pour chaque gène
p_value_Set <- t.test(data_Tom$Set, data_GFP$Set)$p.value
p_value_Ppp2ca <- t.test(data_Tom$Ppp2ca, data_GFP$Ppp2ca)$p.value
# Créer un data frame pour le volcano plot
volcano_data <- data.frame(
gene = rep(c("Set", "Ppp2ca"), each = nrow(data_combined)),
logFC = c(data_combined$logFC_Set, data_combined$logFC_Ppp2ca),
condition = rep(data_combined$condition, 2),
p_value = c(rep(p_value_Set, nrow(data_combined)), rep(p_value_Ppp2ca, nrow(data_combined)))
)
# Ajouter une colonne pour -log10(p-value)
volcano_data <- volcano_data %>%
mutate(minus_log10_p_value = -log10(p_value))
# Créer le volcano plot
ggplot(volcano_data, aes(x = logFC, y = minus_log10_p_value, color = condition)) +
geom_point(alpha = 0.5) +
xlab("Log2 Fold Change") +
ylab("-Log10(p-value)") +
ggtitle("Volcano Plot for Set and Ppp2ca") +
theme_minimal() +
scale_color_manual(values = c("Tom_BA + Tom_Cre" = "blue", "GFP_BA" = "red"))
plot1 <- ggplot(data, aes(x = condition, y = Set, fill = condition)) +
geom_boxplot() +
labs(title = "Expression of Set", x = "Condition", y = "Expression Level") +
theme_minimal()
# Créer un box plot pour le gène Ppp2ca
plot2 <- ggplot(data, aes(x = condition, y = Ppp2ca, fill = condition)) +
geom_boxplot() +
labs(title = "Expression of Ppp2ca", x = "Condition", y = "Expression Level") +
theme_minimal()
plot1 + plot2
# Créer un box plot pour le gène Set
plot1 <- ggplot(data, aes(x = condition, y = Set, fill = condition)) +
geom_boxplot() +
labs(title = "Expression of Set", x = "Condition", y = "Expression Level") +
theme_minimal()
plot1 <- ggplot(data, aes(x = condition, y = Set, fill = condition)) +
geom_boxplot() +
labs(title = "Expression of Set", x = "Condition", y = "Expression Level") +
theme_minimal()
plot1
# Créer un violin plot pour le gène Set
ggplot(data, aes(x = condition, y = Set, fill = condition)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, fill = "white") +
labs(title = "Expression of Set", x = "Condition", y = "Expression Level") +
theme_minimal()
# Créer un violin plot pour le gène Ppp2ca
ggplot(data, aes(x = condition, y = Ppp2ca, fill = condition)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, fill = "white") +
labs(title = "Expression of Ppp2ca", x = "Condition", y = "Expression Level") +
theme_minimal()
data_long <- data %>%
pivot_longer(cols = c(Set, Ppp2ca), names_to = "gene", values_to = "expression")
# Créer le violin plot pour les deux gènes
ggplot(data_long, aes(x = condition, y = expression, fill = condition)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, fill = "white") +
facet_wrap(~gene, scales = "free_y") +
labs(title = "Expression of Set and Ppp2ca", x = "Condition", y = "Expression Level") +
theme_minimal()
View(data_long)
save.image("~/y1/tutorial/databysteph/mat.harmony.SCTv2varFeatures_AllDatasets_AllClean.rds.RData")
load("~/y1/tutorial/databysteph/mat.harmony.SCTv2varFeatures_AllDatasets_AllClean.rds")
library(Seurat)
load("~/y1/tutorial/databysteph/mat.harmony.SCTv2varFeatures_AllDatasets_AllClean.rds")
so <- load("~/y1/tutorial/databysteph/mat.harmony.SCTv2varFeatures_AllDatasets_AllClean.rds")
so <- readRDS("~/y1/tutorial/databysteph/mat.harmony.SCTv2varFeatures_AllDatasets_AllClean.rds")
meta <- so$meta.data
slotNames(so)
meta <- so@meta.data
View(meta)
# Access expression data for specific genes
expression_data <- so[["RNA"]]@data[c("Set", "Ppp2ca"), ]  # Use the correct assay name
# Convert the expression data to a data frame
expression_df <- as.data.frame(t(expression_data))  # Transpose so that cells are rows
View(expression_df)
assay_info <- so[["RNA"]]
counts_data <- assay_info@counts  # Raw counts
View(counts_data)
normalized_data <- assay_info@data  # Normalized data
# Summarize both types of data
summary(counts_data)
summary(normalized_data)
expression_df$cell_id <- rownames(expression_df)
View(expression_df)
View(expression_data)
View(matrix)
expression_df$condition <- matrix$condition
head(expression_df)
ggplot(data_long %>% filter(gene == "Set"), aes(x = condition, y = expression, fill = condition)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, fill = "white", outlier.shape = NA) +
labs(title = "Expression of Set by Condition", x = "Condition", y = "Expression Level") +
theme_minimal()
ggplot(data_long %>% filter(gene == "Ppp2ca"), aes(x = condition, y = expression, fill = condition)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, fill = "white", outlier.shape = NA) +
labs(title = "Expression of Ppp2ca by Condition", x = "Condition", y = "Expression Level") +
theme_minimal()
library(ggsignif)
install.packages("ggsignif")
library(ggsignif)
# Violin plot for the gene Set with statistical annotations
ggplot(data_long %>% filter(gene == "Set"), aes(x = condition, y = expression, fill = condition)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, fill = "white", outlier.shape = NA) +
labs(title = "Expression of Set by Condition", x = "Condition", y = "Expression Level") +
theme_minimal() +
geom_signif(comparisons = list(c("Tom_BA + Tom_Cre", "GFP")),
map_signif_level = TRUE, y_position = max(data_long$expression[data_long$gene == "Set"]) + 1)
ggplot(data_long %>% filter(gene == "Ppp2ca"), aes(x = condition, y = expression, fill = condition)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, fill = "white", outlier.shape = NA) +
labs(title = "Expression of Ppp2ca by Condition", x = "Condition", y = "Expression Level") +
theme_minimal()
View(meta)
expression_df$CellType <- meta$CellType
expression_df$condition1 <- meta$condition
expression_df$fluor <- meta$fluor
head(expression_df)
ba_df <- expression_df %>% filter(condition1=="BA")
ggplot(ba_df, aes(x = Set, y = Ppp2ca, fill = fluor)) +
geom_bar(stat = "identity", position = "dodge") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Expression de Set et Ppp2ca pour Condition1 BA Différencié par Fluor",
y = "Niveau d'Expression",
x = "Set") +
scale_fill_manual(values = c("Tom" = "blue", "GFP" = "green"))
ggplot(ba_df %>% filter(gene == "Set"), aes(x = condition, y = expression, fill = condition)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, fill = "white", outlier.shape = NA) +
labs(title = "Expression of Set by Condition", x = "Condition", y = "Expression Level") +
theme_minimal()
ba_df_long <- ba_df %>%
pivot_longer(cols = c(Set, Ppp2ca), names_to = "gene", values_to = "expression")
ggplot(ba_df_long, aes(x = condition, y = expression, fill = condition)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, fill = "white") +
facet_wrap(~gene, scales = "free_y") +
labs(title = "Expression of Set and Ppp2ca", x = "Condition", y = "Expression Level") +
theme_minimal()
ggplot(ba_df_long, aes(x = condition, y = expression, fill = condition)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, fill = "white") +
facet_wrap(~gene, scales = "free_y") +
labs(title = "Expression of Set and Ppp2ca", x = "Condition1", y = "Expression Level") +
theme_minimal()
ba_df <- expression_df %>% filter(condition1=="BA")
ba_df_long <- ba_df %>%
pivot_longer(cols = c(Set, Ppp2ca), names_to = "gene", values_to = "expression")
View(ba_df_long)
ba_df_long <- ba_df %>%
pivot_longer(cols = c(Set, Ppp2ca), names_to = "gene", values_to = "expression")
ggplot(ba_df_long, aes(x = condition, y = expression, fill = condition)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, fill = "white") +
facet_wrap(~gene, scales = "free_y") +
labs(title = "Expression of Set and Ppp2ca", x = "fluor", y = "Expression Level") +
theme_minimal()
ggplot(ba_df_long, aes(x = fluor, y = expression, fill = fluor)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, fill = "white") +
facet_wrap(~gene, scales = "free_y") +
labs(title = "Expression of Set and Ppp2ca", x = "BA Condition", y = "Expression Level") +
theme_minimal()
hsc_df <-expression_df  %>% filter(CellType=="HSC")
hsc_df_long <- hsc_df %>%
pivot_longer(cols = c(Set, Ppp2ca), names_to = "gene", values_to = "expression")
ggplot(hsc_df_long, aes(x = condition, y = expression, fill = condition)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, fill = "white") +
facet_wrap(~gene, scales = "free_y") +
labs(title = "Expression of Set and Ppp2ca", x = "In HSC cell", y = "Expression Level") +
theme_minimal()
View(hsc_df)
ggplot(ba_df_long, aes(x = fluor, y = expression, fill = fluor)) +
geom_violin(trim = FALSE, alpha = 0.7) +  # Adjust alpha for better visibility
geom_boxplot(width = 0.1, fill = "white", outlier.shape = NA) +  # Remove outliers for cleaner view
facet_wrap(~gene, scales = "free_y") +  # Free y scales for separate axes
labs(title = "Expression of Set and Ppp2ca", x = "BA Condition", y = "Expression Level") +
theme_minimal() +
theme(legend.position = "none")  # Optionally remove the legend
ggplot(ba_df_long, aes(x = fluor, y = expression, fill = fluor)) +
geom_violin(trim = FALSE, alpha = 0.7) +  # Adjust alpha for better visibility
geom_boxplot(width = 0.1, fill = "white", outlier.shape = NA) +  # Remove outliers for cleaner view
facet_wrap(~gene, scales = "free_y") +  # Free y scales for separate axes
labs(title = "Expression of Set and Ppp2ca", x = "BA Condition", y = "Expression Level") +
theme_minimal() +
theme(legend.position = "none")  # Optionally remove the legend
unique(ba_df_long$fluor)
ggplot(ba_df_long, aes(x = fluor, y = expression, fill = fluor)) +
geom_violin(trim = FALSE, alpha = 0.7) +  # Adjust alpha for better visibility
geom_boxplot(width = 0.1, fill = "white", outlier.shape = NA) +  # Optional: boxplot inside violin
facet_wrap(~gene, scales = "free_y") +  # Free y scales for separate axes
labs(title = "Expression of Set and Ppp2ca", x = "BA Condition", y = "Expression Level") +
theme_minimal() +
theme(legend.position = "none")  # Optionally remove the legend
# Check the structure of your data
str(ba_df_long)
# Display the first few rows of your data
head(ba_df_long)
# Check for unique values in the 'gene' and 'fluor' columns
unique(ba_df_long$gene)
unique(ba_df_long$fluor)
# Create the violin plot
ggplot(ba_df_long, aes(x = fluor, y = expression, fill = fluor)) +
geom_violin(trim = FALSE, alpha = 0.7) +  # Violin plots
geom_boxplot(width = 0.1, fill = "white", outlier.shape = NA) +  # Optional boxplot inside
facet_wrap(~gene, scales = "free_y") +  # Separate panels for each gene with free y-axes
labs(title = "Expression of Set and Ppp2ca", x = "BA Condition", y = "Expression Level") +
theme_minimal() +
theme(legend.position = "none")  # Optionally remove legend for clarity
ggplot(ba_df_long, aes(x = fluor, y = expression, fill = fluor)) +
geom_violin(trim = FALSE, alpha = 0.7) +  # Draw the violin plots
geom_boxplot(width = 0.1, fill = "white", outlier.shape = NA) +  # Boxplot on top of violins
facet_wrap(~gene, scales = "fixed") +  # Separate panels for each gene with a fixed y-scale
labs(title = "Expression of Set and Ppp2ca", x = "Condition (fluor)", y = "Expression Level") +
theme_minimal() +  # Clean theme
theme(legend.position = "none")  # Remove the legend
save.image("~/y1/for_katie/20241030.RData")
load("~/y1/tutorial/databysteph/bird/scRNAseq_data.RData")
library(Seurat)
library(SeuratObject)
library(patchwork)
library(dplyr)
library(SingleR)
library(celldex)
library(ggplot2)
library(SummarizedExperiment) #to use SingleR
library(scuttle)  #to use SingleR
#merge and correct batch effect with harmony :
library(harmony)
merged_seurat <- RunHarmony(merged_seurat, group.by.vars = "condition")
#3.7/Normalize data
normalize_merge <- NormalizeData(merged_seurat, normalization.method = "LogNormalize", scale.factor = 10000)
View(normalize_merge)
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#4/identify highly variable features
f5000 <- FindVariableFeatures(normalize_merge, selection.method = "vst", nfeatures = 5000)
top10 <- head(VariableFeatures(f5000), 20)
plot1 <- VariableFeaturePlot(f5000)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#4/identify highly variable features
f3000 <- FindVariableFeatures(normalize_merge, selection.method = "vst", nfeatures = 5000)
#test with f3000
all.genes <- rownames(f3000)
f3000_filtered <- ScaleData(f3000, features = all.genes)
f3000_filtered_PCA <- RunPCA(f3000_filtered, features = VariableFeatures(object = f3000_filtered))
VizDimLoadings(f3000_filtered_PCA, dims = 1:2, reduction = "pca")
DimHeatmap(f3000_filtered_PCA, dims = 1:15, cells = 500, balanced = TRUE)
ElbowPlot(f3000_filtered_PCA)
f3000_filtered_PCA <- FindNeighbors(f3000_filtered_PCA, dims = 1:10)
f3000_filtered_PCA <- FindClusters(f3000_filtered_PCA, resolution = 0.5)
head(Idents(f3000_filtered_PCA), 5)
#run umap
f3000_filtered_PCA <- RunUMAP(f3000_filtered_PCA, dims = 1:10)
DimPlot(f3000_filtered_PCA, reduction = "umap")
DimPlot(f3000_filtered_PCA, reduction = "umap", group.by = "condition")
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#6/Annotate with SingleR
##add reference
reference <- readRDS("/home/ha/y1/tutorial/databysteph/datasets/Contreras(2022)/sce.wk4.rds")
ref <- logNormCounts(reference)
f3000_test <- as.SingleCellExperiment(f3000_filtered_PCA)
##processing
res <- SingleR(test = f3000_test, ref = ref, labels = reference$label)
DefaultAssay(f3000_filtered_PCA)
names(f3000_filtered_PCA[["assays"]])
names(f3000_filtered_PCA)
head(f3000_filtered_PCA@meta.data)
f3000_test <- as.SingleCellExperiment(f3000_filtered_PCA, assay = "RNA")
str(f3000_filtered_PCA)
table(f3000_filtered_PCA$seurat_clusters)
DimPlot(f3000_filtered_PCA, reduction = "umap")
f3000_test <- as.SingleCellExperiment(f3000_filtered_PCA)
f300_test = JoinLayers(f3000_filtered_PCA)
f3000_test <- as.SingleCellExperiment(f300_test)
##processing
res <- SingleR(test = f3000_test, ref = ref, labels = reference$label)
##visualization
f3000_filtered_PCA$singlr_label <- res$labels
DimPlot(f3000_filtered_PCA, reduction = "umap", group.by = 'singlr_label', label = TRUE)
save.image("~/y1/tutorial/databysteph/bird/scRNAseq_data.RData")
DimPlot(f3000_filtered_PCA, reduction = "umap", group.by = "condition")
DimPlot(f3000_filtered_PCA, reduction = "umap", group.by = 'singlr_label', label = TRUE)
save.image("~/y1/tutorial/databysteph/bird/scRNAseq_data.RData")
saveRDS(merged_seurat, file = "merge_rna.rds")
setwd("~/y1/projects/CITEseq_analysis/3_Secondary_Analysis")
#1. Loading library
library("DropletUtils")
#2. Loading raw file matrix :
raw_wk4 <- Read10X_h5("raw_feature_bc_matrix.h5")
